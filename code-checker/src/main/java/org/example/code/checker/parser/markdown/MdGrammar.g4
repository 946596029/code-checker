grammar MdGrammar;

// document := blocks separated by newlines and/or blank tokens
document
  : (block (NEWLINE)+)* block? EOF
  ;

block
  : headerBlock
  | listItem
  | blankBlock
  | paragraph
  ;

// <header:n> Title text
headerBlock
  : HEADER inlineText?
  ;

// list items support optional leading INDENT/TAB tokens
// e.g. <indent:2>- item text
listItem
  : (INDENT | TAB)* (DASH | PLUS | STAR) inlineText?
  ;

// one or more blank markers possibly mixed with NEWLINEs
blankBlock
  : (BLANK | NEWLINE)+
  ;

// paragraph = a line without structural markers, i.e., pure TEXT (and optional SPACE_TOK)
paragraph
  : (inlineText (NEWLINE)?)+
  ;

// inline text = optional SPACE_TOK then TEXT (consume the rest of the line as text)
inlineText
  : (
    SPACE_TOK | SPACE
    | DASH | STAR | PLUS
    | LT | RT | LBRACK | RBRACK | LBRACE | RBRACE | LPAREN | RPAREN
    | HASH
    | NUM
    | WORD
    )+
  ;

// Header and structural tokens generated by preprocessor
HEADER      : '<' 'header' ':' DIGITS '>' ;
INDENT      : '<' 'indent' ':' DIGITS '>' ;
TAB         : '<' 'tab' '>' ;
BLANK       : '<' 'blank' (':' DIGITS)? '>' ;
SPACE_TOK   : '<' 'space' '>' ;
SPACE       : ' ';

// Punctuation and symbols used in lists or text
DASH        : '-' ;
STAR        : '*' ;
PLUS        : '+' ;

// Newline handling
NEWLINE     : '\r'? '\n' ;

LT          : '<' ;
RT          : '>' ;
LBRACK      : '[' ;
RBRACK      : ']' ;
LBRACE      : '{' ;
RBRACE      : '}' ;
LPAREN      : '(' ;
RPAREN      : ')' ;
HASH        : '#' ;

// Text content for the rest of a line (prefer structural tokens first)
NUM         : DIGITS ;
//WORD        : ~[ \r\n\-+*<[{(0-9]+ ;
WORD        : [a-zA-Z_]+;

LINK_TOKEN  : '[' WORD ('' WORD)* ']' '('

// Fragments
fragment DIGITS : [0-9]+ ;